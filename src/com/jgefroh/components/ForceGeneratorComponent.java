package com.jgefroh.components;

import com.jgefroh.core.IComponent;
import com.jgefroh.core.IEntity;
import com.jgefroh.data.Vector;

/**
 * Contains data used to generate force on an object.
 * 
 * 
 * Date: 17JUN13
 * @author Joseph Gefroh
 */
public class ForceGeneratorComponent implements IComponent
{
	//////////
	// DATA
	//////////
	/**The owner of the component.*/
	private IEntity owner;

	/**The amount of time to wait in-between increments, in milliseconds.*/
	private long interval;
	
	/**The time the velocity was last updated.*/
	private long lastUpdated;
	
	/**The force being generated by this component.*/
	private Vector vector;
	
	/**The maximum magnitude that can be generated.*/
	private double maxMagnitude;
	
	/**The amount to increment the magnitude by, per turn.*/
	private double increment;
	
	/**The amount to decrease the magnitude by, per turn.*/
	private double decrement;
	
	
	//////////
	// INIT
	//////////
	/**
	 * Creates a new instance of this {@code Component}.
	 * @param owner	the IEntity owner of the component
	 */
	public ForceGeneratorComponent(final IEntity owner)
	{
		setOwner(owner);
		init();
	}
	
	@Override
	public void init()
	{
		setVector(new Vector());
		setLastUpdated(-1);
		setInterval(0);
	}
	
	
	//////////
	// GETTERS
	//////////
	@Override
	public IEntity getOwner()
	{
		return this.owner;
	}
	
	/**
	 * Gets the update interval of the component.
	 * @return	the time, in ms, to wait before attempting an update
	 */
	public long getInterval()
	{
		return this.interval;
	}
	
	/**
	 * Gets the time the component was last updated.
	 * @return	the time, in ms, the component was last updated
	 */
	public long getLastUpdated()
	{
		return this.lastUpdated;
	}
	
	/**
	 * Gets the amount to increment the magnitude by, per turn.
	 * @return	the amount to increment the magnitude by
	 */
	public double getIncrement()
	{
		return this.increment;
	}
	
	/**
	 * Gets the amount to decrement the magnitude by, per turn.
	 * @return	the amount to decrement the magnitude by
	 */
	public double getDecrement()
	{
		return this.decrement;
	}
	
	/**
	 * Gets the maximum magnitude that can be generated.
	 * @return	the maximum magnitude
	 */
	public double getMaxMagnitude()
	{
		return this.maxMagnitude;
	}
	
	/**
	 * Gets the Vector representing the generated force.
	 * @return	the vector
	 */
	public Vector getVector()
	{
		return this.vector;
	}
	
	
	
	//////////
	// SETTERS
	//////////
	@Override
	public void setOwner(final IEntity owner)
	{
		this.owner = owner;
	}
		
	/**
	 * Sets the update interval of the component.
	 * @param interval	the time, in ms, to wait before attempting a move
	 */
	public void setInterval(final long interval)
	{
		this.interval = interval;
	}
	
	/**
	 * Sets the time the component was last updated.
	 * @param lastUpdated	the time, in ms, the component was last updated
	 */
	public void setLastUpdated(final long lastUpdated)
	{
		this.lastUpdated = lastUpdated;
	}
	
	/**
	 * Sets the amount to increment the magnitude by, per turn.
	 * @param increment	the amount to increment the magnitude by
	 */
	public void setIncrement(final double increment)
	{
		this.increment = increment;
	}
	
	/**
	 * Sets the amount to decrement the magnitude by, per turn.
	 * @param decrement	the amount to decrement the magnitude by
	 */
	public void setDecrement(final double decrement)
	{
		this.decrement = decrement;
	}
	
	/**
	 * Sets the maximum possible magnitude that can be generated
	 * @param maxMagnitude	the maximum amount of force that can be generated
	 */
	public void setMaxMagnitude(final double maxMagnitude)
	{
		this.vector.setMaxMagnitude(maxMagnitude);
	}
	
	/**
	 * Sets the underlying Vector of this component.
	 * @param vector	the vector to set to
	 */
	public void setVector(final Vector vector)
	{
		this.vector = vector;
	}
}