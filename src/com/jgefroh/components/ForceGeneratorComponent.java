package com.jgefroh.components;

import com.jgefroh.core.IComponent;
import com.jgefroh.core.IEntity;
import com.jgefroh.data.Vector;

/**
 * Contains data used to generate force on an object.
 * 
 * 
 * Date: 17JUN13
 * @author Joseph Gefroh
 */
public class ForceGeneratorComponent implements IComponent
{
	//////////
	// DATA
	//////////
	/**The owner of the component.*/
	private IEntity owner;

	/**The amount of time to wait in-between increments, in milliseconds.*/
	private long interval;
	
	/**The time the velocity was last updated.*/
	private long lastUpdated;
	
	/**The amount of force to generate.*/
	private double magnitude;
	
	/**The force being generated by this component.*/
	private Vector vector;
	
	/**FLAG: Indicates whether this force should be constantly applied.*/
	private boolean isContinuous;
	
	/**FLAG: Indicates this force is relative to the bearing of the entity.*/
	private boolean isRelative;
	//////////
	// INIT
	//////////
	/**
	 * Creates a new instance of this {@code Component}.
	 * @param owner	the IEntity owner of the component
	 */
	public ForceGeneratorComponent(final IEntity owner)
	{
		setOwner(owner);
		init();
	}
	
	@Override
	public void init()
	{
		setVector(new Vector());
		setLastUpdated(-1);
		setInterval(0);
	}
	
	
	//////////
	// GETTERS
	//////////
	@Override
	public IEntity getOwner()
	{
		return this.owner;
	}
	
	/**
	 * Gets the update interval of the component.
	 * @return	the time, in ms, to wait before attempting an update
	 */
	public long getInterval()
	{
		return this.interval;
	}
	
	/**
	 * Gets the time the component was last updated.
	 * @return	the time, in ms, the component was last updated
	 */
	public long getLastUpdated()
	{
		return this.lastUpdated;
	}
	
	
	/**
	 * Gets the Vector representing the generated force.
	 * @return	the vector
	 */
	public Vector getVector()
	{
		return this.vector;
	}

	/**
	 * Gets the amount of force to generate.
	 * @return the amount of force to generate
	 */
	public double getMagnitude()
	{
		return this.magnitude;
	}
	
	/**
	 * Gets the flag that indicates this force should be constantly applied.
	 * @return	true if should be applied; false otherwise
	 */
	public boolean isContinuous()
	{
		return this.isContinuous;
	}
	
	/**
	 * Gets the flag that indicates this force is relative to current bearing.
	 * @return	true if relative; false otherwise
	 */
	public boolean isRelative()
	{
		return this.isRelative;
	}
	//////////
	// SETTERS
	//////////
	@Override
	public void setOwner(final IEntity owner)
	{
		this.owner = owner;
	}
		
	/**
	 * Sets the update interval of the component.
	 * @param interval	the time, in ms, to wait before attempting a move
	 */
	public void setInterval(final long interval)
	{
		this.interval = interval;
	}
	
	/**
	 * Sets the time the component was last updated.
	 * @param lastUpdated	the time, in ms, the component was last updated
	 */
	public void setLastUpdated(final long lastUpdated)
	{
		this.lastUpdated = lastUpdated;
	}
	
	/**
	 * Sets the underlying Vector of this component.
	 * @param vector	the vector to set to
	 */
	public void setVector(final Vector vector)
	{
		if(vector!=null)
		{
			this.vector = vector;			
		}
		else
		{
			this.vector = new Vector();
		}
	}
	
	/**
	 * Sets the amount of force to generate.
	 * @param magnitude	the amount of force to generate
	 */
	public void setMagnitude(final double magnitude)
	{
		this.magnitude = magnitude;
	}
	
	/**
	 * Sets the flag that indicates this force should be constantly applied.
	 * @param isContinuous	true if it should be applied; false otherwise
	 */
	public void setContinuous(final boolean isContinuous)
	{
		this.isContinuous = isContinuous;
	}
	
	/**
	 * Sets the flag that indicates this force is relative
	 * @param isRelative	true if it is relative;false otherwise
	 */
	public void setRelative(final boolean isRelative)
	{
		this.isRelative = isRelative;
	}
}